import datetime 

import IPython.display
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import pandas_datareader
import sklearn
import sklearn.linear_model
import sklearn.model_selection

import yfinance

# データウェアハウス
yfinance.pdr_override()
df_aapl = pandas_datareader.data.get_data_yahoo('AAPL', '2014-11-01')

df_aapl['SMA'] = df_aapl['Close'].rolling(window=14).mean()
df_aapl['change'] = (((df_aapl['Close'] - df_aapl['Open'])) / (df_aapl['Open']) * 100)
df_aapl.tail(2).round(2)

df_aapl['label'] = df_aapl['Close'].shift(-30)

# ラベル行を削除したデーターをXに代入
X = np.array(df_aapl.drop(['label', 'SMA'], axis=1))
# 取りうる値の大小が著しく異なる特徴量を入れると結果が悪くなり、平均を引いて、標準偏差で割ってスケーリングする
X = sklearn.preprocessing.scale(X)

# 予測に使う過去30日間のデーター
predict_data = X[-30:]
# 過去30日を取り除いた入力データー
X = X[:-30]
y = np.array(df_aapl['label'])
# 過去30日を取り除いた正解ラベル
y = y[:-30]

# 訓練データー80% 検証データー 20%に分ける
# 第一引数に入力データー、第２引数に正解ラベルの配列
X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(
    X, y, test_size = 0.2)

# 訓練データーを用いて学習する
lr = sklearn.linear_model.LinearRegression()
lr.fit(X_train,y_train)

# 検証データーを用いて検証してみる
accuracy = lr.score(X_test, y_test)
accuracy
